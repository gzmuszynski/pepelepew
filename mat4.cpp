#include "mat4.h"

mat4::mat4(float num)
{
    W[0].x = num;
    W[1].y = num;
    W[2].z = num;
    W[3].w = num;
}

mat4::mat4(const mat4 &mat)
{
    W[0] = mat.W[0];
    W[1] = mat.W[1];
    W[2] = mat.W[2];
    W[3] = mat.W[3];
}

mat4::mat4(float4 &W0, float4 &W1, float4 &W2, float4 &W3)
{
    W[0] = W0;
    W[1] = W1;
    W[2] = W2;
    W[3] = W3;
}

float4 &mat4::operator [](int i)
{
    return W[i];
}

mat4 mat4::operator *(mat4 &B)
{
    mat4 mat;

    mat[0][0] = (W[0][0]*B[0][0]) + (W[0][1]*B[1][0]) + (W[0][2]*B[2][0]) + (W[0][3]*B[3][0]);
    mat[1][0] = (W[1][0]*B[0][0]) + (W[1][1]*B[1][0]) + (W[1][2]*B[2][0]) + (W[1][3]*B[3][0]);
    mat[2][0] = (W[2][0]*B[0][0]) + (W[2][1]*B[1][0]) + (W[2][2]*B[2][0]) + (W[2][3]*B[3][0]);
    mat[3][0] = (W[3][0]*B[0][0]) + (W[3][1]*B[1][0]) + (W[3][2]*B[2][0]) + (W[3][3]*B[3][0]);

    mat[0][1] = (W[0][0]*B[0][1]) + (W[0][1]*B[1][1]) + (W[0][2]*B[2][2]) + (W[0][3]*B[3][3]);
    mat[1][1] = (W[1][0]*B[0][1]) + (W[1][1]*B[1][1]) + (W[1][2]*B[2][2]) + (W[1][3]*B[3][3]);
    mat[2][1] = (W[2][0]*B[0][1]) + (W[2][1]*B[1][1]) + (W[2][2]*B[2][2]) + (W[2][3]*B[3][3]);
    mat[3][1] = (W[3][0]*B[0][1]) + (W[3][1]*B[1][1]) + (W[3][2]*B[2][2]) + (W[3][3]*B[3][3]);

    mat[0][2] = (W[0][0]*B[0][2]) + (W[0][1]*B[1][2]) + (W[0][2]*B[2][2]) + (W[0][3]*B[3][2]);
    mat[1][2] = (W[1][0]*B[0][2]) + (W[1][1]*B[1][2]) + (W[1][2]*B[2][2]) + (W[1][3]*B[3][2]);
    mat[2][2] = (W[2][0]*B[0][2]) + (W[2][1]*B[1][2]) + (W[2][2]*B[2][2]) + (W[2][3]*B[3][2]);
    mat[3][2] = (W[3][0]*B[0][2]) + (W[3][1]*B[1][2]) + (W[3][2]*B[2][2]) + (W[3][3]*B[3][2]);

    mat[0][3] = (W[0][0]*B[0][3]) + (W[0][1]*B[1][3]) + (W[0][2]*B[2][3]) + (W[0][3]*B[3][3]);
    mat[1][3] = (W[1][0]*B[0][3]) + (W[1][1]*B[1][3]) + (W[1][2]*B[2][3]) + (W[1][3]*B[3][3]);
    mat[2][3] = (W[2][0]*B[0][3]) + (W[2][1]*B[1][3]) + (W[2][2]*B[2][3]) + (W[2][3]*B[3][3]);
    mat[3][3] = (W[3][0]*B[0][3]) + (W[3][1]*B[1][3]) + (W[3][2]*B[2][3]) + (W[3][3]*B[3][3]);

    return mat;
}

mat4 mat4::operator *=(mat4 &A)
{
    mat4 B(*this);

    W[0][0] = (A[0][0]*B[0][0]) + (A[0][1]*B[1][0]) + (A[0][2]*B[2][0]) + (A[0][3]*B[3][0]);
    W[1][0] = (A[1][0]*B[0][0]) + (A[1][1]*B[1][0]) + (A[1][2]*B[2][0]) + (A[1][3]*B[3][0]);
    W[2][0] = (A[2][0]*B[0][0]) + (A[2][1]*B[1][0]) + (A[2][2]*B[2][0]) + (A[2][3]*B[3][0]);
    W[3][0] = (A[3][0]*B[0][0]) + (A[3][1]*B[1][0]) + (A[3][2]*B[2][0]) + (A[3][3]*B[3][0]);

    W[0][1] = (A[0][0]*B[0][1]) + (A[0][1]*B[1][1]) + (A[0][2]*B[2][2]) + (A[0][3]*B[3][3]);
    W[1][1] = (A[1][0]*B[0][1]) + (A[1][1]*B[1][1]) + (A[1][2]*B[2][2]) + (A[1][3]*B[3][3]);
    W[2][1] = (A[2][0]*B[0][1]) + (A[2][1]*B[1][1]) + (A[2][2]*B[2][2]) + (A[2][3]*B[3][3]);
    W[3][1] = (A[3][0]*B[0][1]) + (A[3][1]*B[1][1]) + (A[3][2]*B[2][2]) + (A[3][3]*B[3][3]);

    W[0][2] = (A[0][0]*B[0][2]) + (A[0][1]*B[1][2]) + (A[0][2]*B[2][2]) + (A[0][3]*B[3][2]);
    W[1][2] = (A[1][0]*B[0][2]) + (A[1][1]*B[1][2]) + (A[1][2]*B[2][2]) + (A[1][3]*B[3][2]);
    W[2][2] = (A[2][0]*B[0][2]) + (A[2][1]*B[1][2]) + (A[2][2]*B[2][2]) + (A[2][3]*B[3][2]);
    W[3][2] = (A[3][0]*B[0][2]) + (A[3][1]*B[1][2]) + (A[3][2]*B[2][2]) + (A[3][3]*B[3][2]);

    W[0][3] = (A[0][0]*B[0][3]) + (A[0][1]*B[1][3]) + (A[0][2]*B[2][3]) + (A[0][3]*B[3][3]);
    W[1][3] = (A[1][0]*B[0][3]) + (A[1][1]*B[1][3]) + (A[1][2]*B[2][3]) + (A[1][3]*B[3][3]);
    W[2][3] = (A[2][0]*B[0][3]) + (A[2][1]*B[1][3]) + (A[2][2]*B[2][3]) + (A[2][3]*B[3][3]);
    W[3][3] = (A[3][0]*B[0][3]) + (A[3][1]*B[1][3]) + (A[3][2]*B[2][3]) + (A[3][3]*B[3][3]);

    return *this;
}

float4 operator*(mat4 &mat, float4 &vec)
{
    float4 v;

    v.x = (mat[0][0]*vec.x) + (mat[0][1]*vec.y) + (mat[0][2]*vec.z) + (mat[0][3]*vec.w);
    v.y = (mat[1][0]*vec.x) + (mat[1][1]*vec.y) + (mat[1][2]*vec.z) + (mat[1][3]*vec.w);
    v.z = (mat[2][0]*vec.x) + (mat[2][1]*vec.y) + (mat[2][2]*vec.z) + (mat[2][3]*vec.w);
    v.w = (mat[3][0]*vec.x) + (mat[3][1]*vec.y) + (mat[3][2]*vec.z) + (mat[3][3]*vec.w);

    return v;
}

float4 operator*(float4 &vec, mat4 &mat)
{
    float4 v;

    v.x = (mat[0][0]*vec.x) + (mat[0][1]*vec.y) + (mat[0][2]*vec.z) + (mat[0][3]*vec.w);
    v.y = (mat[1][0]*vec.x) + (mat[1][1]*vec.y) + (mat[1][2]*vec.z) + (mat[1][3]*vec.w);
    v.z = (mat[2][0]*vec.x) + (mat[2][1]*vec.y) + (mat[2][2]*vec.z) + (mat[2][3]*vec.w);
    v.w = (mat[3][0]*vec.x) + (mat[3][1]*vec.y) + (mat[3][2]*vec.z) + (mat[3][3]*vec.w);

    return v;
}

float4 operator *=(float4 &vec, mat4 &mat)
{
    vec.x = (mat[0][0]*vec.x) + (mat[0][1]*vec.y) + (mat[0][2]*vec.z) + (mat[0][3]*vec.w);
    vec.y = (mat[1][0]*vec.x) + (mat[1][1]*vec.y) + (mat[1][2]*vec.z) + (mat[1][3]*vec.w);
    vec.z = (mat[2][0]*vec.x) + (mat[2][1]*vec.y) + (mat[2][2]*vec.z) + (mat[2][3]*vec.w);
    vec.w = (mat[3][0]*vec.x) + (mat[3][1]*vec.y) + (mat[3][2]*vec.z) + (mat[3][3]*vec.w);

    return vec;
}
mat4 inverse(mat4 &mat)
{
    mat4 inv;

    inv[0][0] = mat[1][1] * mat[2][2] * mat[3][3] - mat[1][1] * mat[2][3] * mat[3][2] - mat[2][1] * mat[1][2] * mat[3][3] +
                mat[2][1] * mat[1][3] * mat[3][2] + mat[3][1] * mat[1][2] * mat[2][3] - mat[3][1] * mat[1][3] * mat[2][2];

    inv[1][0] =-mat[1][0] * mat[2][2] * mat[3][3] + mat[1][0] * mat[2][3] * mat[3][2] + mat[2][0] * mat[1][2] * mat[3][3] -
                mat[2][0] * mat[1][3] * mat[3][2] - mat[3][0] * mat[1][2] * mat[2][3] + mat[3][0] * mat[1][3] * mat[2][2];

    inv[2][0] = mat[1][0] * mat[2][1] * mat[3][3] - mat[1][0] * mat[2][3] * mat[3][1] - mat[2][0] * mat[1][1] * mat[3][3] +
                mat[2][0] * mat[1][3] * mat[3][1] + mat[3][0] * mat[1][1] * mat[2][3] - mat[3][0] * mat[1][3] * mat[2][1];

    inv[3][0] =-mat[1][0] * mat[2][1] * mat[3][2] + mat[1][0] * mat[2][2] * mat[3][1] +mat[2][0]  * mat[1][1] * mat[3][2] -
                mat[2][0] * mat[1][2] * mat[3][1] - mat[3][0] * mat[1][1] * mat[2][2] + mat[3][0] * mat[1][2] * mat[2][1];

    inv[0][1] =-mat[0][1] * mat[2][2] * mat[3][3] + mat[0][1] * mat[2][3] * mat[3][2] + mat[2][1] * mat[0][2] * mat[3][3] -
                mat[2][1] * mat[0][3] * mat[3][2] - mat[3][1] * mat[0][2] * mat[2][3] + mat[3][1] * mat[0][3] * mat[2][2];

    inv[1][1] = mat[0][0] * mat[2][2] * mat[3][3] - mat[0][0] * mat[2][3] * mat[3][2] - mat[2][0] * mat[0][2] * mat[3][3] +
                mat[2][0] * mat[0][3] * mat[3][2] + mat[3][0] * mat[0][2] * mat[2][3] - mat[3][0] * mat[0][3] * mat[2][2];

    inv[2][1] =-mat[0][0] * mat[2][1] * mat[3][3] + mat[0][0] * mat[2][3] * mat[3][1] + mat[2][0] * mat[0][1] * mat[3][3] -
                mat[2][0] * mat[0][3] * mat[3][1] - mat[3][0] * mat[0][1] * mat[2][3] + mat[3][0] * mat[0][3] * mat[2][1];

    inv[3][1] = mat[0][0] * mat[2][1] * mat[3][2] - mat[0][0] * mat[2][2] * mat[3][1] - mat[2][0] * mat[0][1] * mat[3][2] +
                mat[2][0] * mat[0][2] * mat[3][1] + mat[3][0] * mat[0][1] * mat[2][2] - mat[3][0] * mat[0][2] * mat[2][1];

    inv[0][2] = mat[0][1] * mat[1][2] * mat[3][3] - mat[0][1] * mat[1][3] * mat[3][2] - mat[1][1] * mat[0][2] * mat[3][3] +
                mat[1][1] * mat[0][3] * mat[3][2] + mat[3][1] * mat[0][2] * mat[1][3] - mat[3][1] * mat[0][3] * mat[1][2];

    inv[1][2] =-mat[0][0] * mat[1][2] * mat[3][3] + mat[0][0] * mat[1][3] * mat[3][2] + mat[1][0] * mat[0][2] * mat[3][3] -
                mat[1][0] * mat[0][3] * mat[3][2] - mat[3][0] * mat[0][2] * mat[1][3] + mat[3][0] * mat[0][3] * mat[1][2];

    inv[2][2] = mat[0][0] * mat[1][1] * mat[3][3] - mat[0][0] * mat[1][3] * mat[3][1] - mat[1][0] * mat[0][1] * mat[3][3] +
                mat[1][0] * mat[0][3] * mat[3][1] + mat[3][0] * mat[0][1] * mat[1][3] - mat[3][0] * mat[0][3] * mat[1][1];

    inv[3][2] =-mat[0][0] * mat[1][1] * mat[3][2] + mat[0][0] * mat[1][2] * mat[3][1] + mat[1][0] * mat[0][1] * mat[3][2] -
                mat[1][0] * mat[0][2] * mat[3][1] - mat[3][0] * mat[0][1] * mat[1][2] + mat[3][0] * mat[0][2] * mat[1][1];

    inv[0][3] =-mat[0][1] * mat[1][2] * mat[2][3] + mat[0][1] * mat[1][3] * mat[2][2] + mat[1][1] * mat[0][2] * mat[2][3] -
                mat[1][1] * mat[0][3] * mat[2][2] - mat[2][1] * mat[0][2] * mat[1][3] + mat[2][1] * mat[0][3] * mat[1][2];

    inv[1][3] = mat[0][0] * mat[1][2] * mat[2][3] - mat[0][0] * mat[1][3] * mat[2][2] - mat[1][0] * mat[0][2] * mat[2][3] +
                mat[1][0] * mat[0][3] * mat[2][2] + mat[2][0] * mat[0][2] * mat[1][3] - mat[2][0] * mat[0][3] * mat[1][2];

    inv[2][3] =-mat[0][0] * mat[1][1] * mat[2][3] + mat[0][0] * mat[1][3] * mat[2][1] + mat[1][0] * mat[0][1] * mat[2][3] -
                mat[1][0] * mat[0][3] * mat[2][1] - mat[2][0] * mat[0][1] * mat[1][3] + mat[2][0] * mat[0][3] * mat[1][1];

    inv[3][3] = mat[0][0] * mat[1][1] * mat[2][2] - mat[0][0] * mat[1][2] * mat[2][1] - mat[1][0] * mat[0][1] * mat[2][2] +
                mat[1][0] * mat[0][2] * mat[2][1] + mat[2][0] * mat[0][1] * mat[1][2] - mat[2][0] * mat[0][2] * mat[1][1];

    float det = mat[0][0] * inv[0][0] + mat[0][1] * inv[1][0] + mat[0][2] * inv[2][0] + mat[0][3] * inv[3][0];

    if (det == 0)
        return mat;

    det = 1.0 / det;

    for(int x = 0; x < 4; x++)
    {
        for(int y = 0; y < 4; y++)
        {
            inv[x][y] *= det;
        }
    }

    return inv;
}

mat4 transpose(mat4 &mat)
{
//    mat4 M = {{{mat[0][0], mat[1][0], mat[2][0], mat[3][0]},
//               {mat[0][1], mat[1][1], mat[2][1], mat[3][1]},
//               {mat[0][2], mat[1][2], mat[2][2], mat[3][2]},
//               {mat[0][3], mat[1][3], mat[2][3], mat[3][3]}}};
    return mat4();
}

